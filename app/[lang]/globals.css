@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  scroll-behavior: smooth;
}

@layer components {
  .heading1 {
    @apply text-6xl font-bold text-white;
  }

  .heading2 {
    @apply text-5xl font-bold;
  }

  .heading3 {
    @apply text-4xl font-bold;
  }

  .paragraph {
    @apply text-4xl font-normal text-black;
  }
}

.blue__gradient {
  background: linear-gradient(180deg, #3D66F5 0%, #4C19AE 100%);
}

.blue__gradient2 {
  background: linear-gradient(180deg, #4C19AE 0%, #3D66F5 100%);
}

/* shimmer.css */
.shimmer-bg {
  background: linear-gradient(90deg,
      rgba(61, 102, 245, 0.6) 0%,
      /* Blue */
      rgba(76, 25, 174, 0.8) 25%,
      /* Purple */
      rgba(224, 64, 251, 0.7) 50%,
      /* Pinkish-purple */
      rgba(61, 102, 245, 0.6) 75%,
      /* Blue again */
      rgba(113, 235, 255, 0.8) 100%
      /* Light cyan for highlight */
    );
  background-size: 200% 200%;
  animation: shimmer 6s ease-in-out infinite;
  border-radius: 25px;
}

@keyframes shimmer {
  0% {
    background-position: 200% 0;
  }

  50% {
    background-position: -200% 0;
  }

  100% {
    background-position: 200% 0;
  }
}

/* Add this to your global CSS or inline within your component */
@keyframes flicker {
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.flicker-bg {
  animation: flicker 1s infinite ease-in-out;
  background-color: rgba(255, 255, 255, 0.2);
  /* Optional color for a flicker effect */
}

.input {
  flex-shrink: 1;
  appearance: none;
  height: 3rem
    /* 48px */
  ;
  padding-left: 1rem
    /* 16px */
  ;
  padding-right: 1rem
    /* 16px */
  ;
  font-size: 0.875rem
    /* 14px */
  ;
  font-size: 1rem
    /* 16px */
  ;
  line-height: 1.25rem
    /* 20px */
  ;
  line-height: 2;
  line-height: 1.5rem
    /* 24px */
  ;
  border-radius: var(--rounded-btn, 0.5rem
      /* 8px */
    );
  border-width: 1px;
  border-color: transparent;
  --tw-bg-opacity: 1;
  background-color: #424141;
}

.input[type="number"]::-webkit-inner-spin-button,
.input-md[type="number"]::-webkit-inner-spin-button {
  margin-top: -1rem
    /* -16px */
  ;
  margin-bottom: -1rem
    /* -16px */
  ;
  margin-inline-end: -1rem
    /* -16px */
  ;
}

.input input {
  --tw-bg-opacity: 1;
  background-color: var(--fallback-p, oklch(var(--p)/var(--tw-bg-opacity)));
  background-color: transparent;
}

.input input:focus {
  outline: 2px solid transparent;
  outline-offset: 2px;
}

.input[list]::-webkit-calendar-picker-indicator {
  line-height: 1em;
}

.input:focus,
.input:focus-within {
  box-shadow: none;
  border-color: var(--fallback-bc, oklch(var(--bc)/0.2));
  outline-style: solid;
  outline-width: 2px;
  outline-offset: 2px;
  outline-color: var(--fallback-bc, oklch(var(--bc)/0.2));
}

.input:focus,
.input:focus-within {
  box-shadow: none;
  border-color: rgba(255, 255, 255, 0.2);
  outline-style: solid;
  outline-width: 2px;
  outline-offset: 2px;
  outline-color: rgba(255, 255, 255, 0.2);
}

.input:has(> input[disabled]),
.input-disabled,
.input:disabled,
.input[disabled] {
  cursor: not-allowed;
  --tw-border-opacity: 1;
  border-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-border-opacity)));
  --tw-bg-opacity: 1;
  background-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-bg-opacity)));
  color: var(--fallback-bc, oklch(var(--bc)/0.4));
}

.input:has(> input[disabled]),
.input-disabled,
.input:disabled,
.input[disabled] {
  cursor: not-allowed;
  --tw-border-opacity: 1;
  border-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-border-opacity)));
  --tw-bg-opacity: 1;
  background-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-bg-opacity)));
  color: var(--fallback-bc, oklch(var(--bc)/0.4));
}

.input:has(> input[disabled]),
.input-disabled,
.input:disabled,
.input[disabled] {
  cursor: not-allowed;
  --tw-border-opacity: 1;
  border-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-border-opacity)));
  --tw-bg-opacity: 1;
  background-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-bg-opacity)));
  color: var(--fallback-bc, oklch(var(--bc)/0.4));
}

.input:has(> input[disabled])::placeholder,
.input-disabled::placeholder,
.input:disabled::placeholder,
.input[disabled]::placeholder {
  color: var(--fallback-bc, oklch(var(--bc)/var(--tw-placeholder-opacity)));
  --tw-placeholder-opacity: 0.2;
}

.input:has(> input[disabled])::placeholder,
.input-disabled::placeholder,
.input:disabled::placeholder,
.input[disabled]::placeholder {
  color: var(--fallback-bc, oklch(var(--bc)/var(--tw-placeholder-opacity)));
  --tw-placeholder-opacity: 0.2;
}

.input:has(> input[disabled])::placeholder,
.input-disabled::placeholder,
.input:disabled::placeholder,
.input[disabled]::placeholder {
  color: var(--fallback-bc, oklch(var(--bc)/var(--tw-placeholder-opacity)));
  --tw-placeholder-opacity: 0.2;
}

.input:has(> input[disabled])>input[disabled] {
  cursor: not-allowed;
}

.input::-webkit-date-and-time-value {
  text-align: inherit;
}

.mockup-browser .mockup-browser-toolbar .input {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  display: block;
  height: 1.75rem
    /* 28px */
  ;
  width: 24rem
    /* 384px */
  ;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  --tw-bg-opacity: 1;
  background-color: var(--fallback-b2, oklch(var(--b2)/var(--tw-bg-opacity)));
  padding-left: 2rem
    /* 32px */
  ;
  direction: ltr;
}

.mockup-browser .mockup-browser-toolbar .input:before {
  content: "";
  position: absolute;
  left: 0.5rem
    /* 8px */
  ;
  top: 50%;
  aspect-ratio: 1 / 1;
  height: 0.75rem
    /* 12px */
  ;
  --tw-translate-y: -50%;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  border-radius: 9999px;
  border-width: 2px;
  border-color: currentColor;
  opacity: 0.6;
}

.mockup-browser .mockup-browser-toolbar .input:after {
  content: "";
  position: absolute;
  left: 1.25rem
    /* 20px */
  ;
  top: 50%;
  height: 0.5rem
    /* 8px */
  ;
  --tw-translate-y: 25%;
  --tw-rotate: -45deg;
  transform: translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y));
  border-radius: 9999px;
  border-width: 1px;
  border-color: currentColor;
  opacity: 0.6;
}

/* General input slider reset */
input[type='range'] {
  -webkit-appearance: none;
  width: 100%;
  height: 20px;
  background: #292929;
  /* Dark background */
  outline: none;
  margin: 0;
  padding: 0;
  --value: 0%;
  /* Default to 50% (this will be overridden by JS) */
}

/* The filled-in portion of the slider (green fill based on value) */
input[type='range']::-webkit-slider-runnable-track {
  height: 20px;
  /* Match the main height */
  background: linear-gradient(to right, #51FF00 0%, #51FF00 var(--value), #292929 var(--value), #292929 100%);
  /* No border radius for square edges */
}

input[type='range']::-moz-range-track {
  height: 20px;
  background: linear-gradient(to right, #51FF00 0%, #51FF00 var(--value), #292929 var(--value), #292929 100%);
}

/* The draggable thumb */
input[type='range']::-webkit-slider-thumb {
  -webkit-appearance: none;
  appearance: none;
  width: 20px;
  /* Square size */
  height: 20px;
  /* Square size */
  background: #42CF00;
  /* Dark green thumb color */
  cursor: pointer;
  /* Vertically align thumb with track */
}

input[type='range']::-moz-range-thumb {
  width: 20px;
  height: 20px;
  background: #42CF00;
  cursor: pointer;
}

/* Remove outline on focus */
input[type='range']:focus {
  outline: none;
}